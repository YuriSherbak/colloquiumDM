
#ifndef N_H
#define N_H

#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <iterator>

using namespace std;

// Натуральные числа
class N
{
private:
	//массив цифр, из которых состоит число
	vector <short int> number;	

public:
	N(vector <short int>);
	N();

	~N();

	//массив цифр, из которых состоит число
	vector <short int> getNumber();

	int size();

	//Преобразование в строку
	string toString();

	//cравнение натуральных чисел : 2 - если первое больше второго, 0, если равно, 1 иначе.
	//Анисимов Влад
	int COM_NN_D(N b);

	//проверка на ноль: если число не равно нулю, то «да» иначе «нет»
	//Долгая Полина
	bool NZER_N_B();

	//Добавление 1 к натуральному числу (+1)
	//Долгая Полина
	N ADD_1N_N();

	//Сложение натуральных чисел
	//Анисимов Влад
	N ADD_NN_N(N b);

	//Вычитание из первого большего натурального числа второго меньшего или равного первому
	//Анисимов Влад
	N SUB_NN_N(N b);

	//Умножение числа на цифру
	//Ратник Кристина
	N MUL_ND_N(int d);

	//Умножение натурального числа на 10 в степени k
	//Ратник Кристина
	N MUL_Nk_N(int k);

	//Умножение натуральных чисел
	//Ратник Кристина
	N MUL_NN_N(N b);

	//Вычитание из первого натурального второго натурального, умноженного на цифру для случая с неотрицательным результатом( a >= b*d)
	//Григаревичюс Костя
	N SUB_NDN_N(N b, int d);

	//Вычисление первой цифры деления большего натурального на меньшее, домноженное на 10^k,где k - номер позиции этой цифры (номер считается с нуля)
	//
	N DIV_NN_Dk(N b, int k);

	//Частное от деления большего натурального числа на меньшее или равное натуральное с остатком(делитель отличен от нуля)
	N DIV_NN_N(N b);

	//Остаток от деления большего натурального числа на меньшее или равное натуральное с остатком(делитель отличен от нуля)
	N MOD_NN_N(N b);

	//НОД натуральных чисел
	N GCF_NN_N(N b);

	//НОК натуральных чисел
	N LCM_NN_N(N b);
};
#endif //N_H
