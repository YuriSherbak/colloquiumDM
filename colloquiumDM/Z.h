#ifndef Z_H
#define Z_H
#include "N.h"
using namespace std;

//÷елые числа
class Z
{
private:
	N num; //цифры числа
	bool pos; //знак числа ("true" - положительное, "false" - отрицательное
public:
	Z();
	Z(N, bool);
	Z(vector <short int>, bool);
	~Z();

	//ѕреобразование в строку
	string toString();
	//ѕолучить число без знака
	N getNum();
	//ѕолучить знак числа ("+" или "-");
	bool getPos();

	//јбсолютна€ величина числа, результат - натуральное
	//@ входные данные
	//@ выходные данные
	//@ баги, наличие исключений (если есть)
	//@ ‘амили€ и »м€ ответственного
	N ABS_Z_N();

	//ќпределение положительности числа(2 - положительное, 0 Ч равное нулю, 1 - отрицательное)
	int POZ_Z_D();

	//”множение целого на(-1)
	Z MUL_ZM_Z();

	//ѕреобразование натурального в целое
	Z TRANS_N_Z();

	//ѕреобразование неотрицательного целого в натуральное
	N TRANS_Z_N();

	//—ложение целых чисел
	Z ADD_ZZ_Z(Z);

	//¬ычитание целых чисел
	Z SUB_ZZ_Z(Z);

	//”множение целых чисел
	Z MUL_ZZ_Z(Z);

	//„астное от делени€ большего целого числа на меньшее или равное целое с остатком(делитель отличен от нул€)
	Z DIV_ZZ_Z(Z);

	//„астное от делени€ большего целого числа на меньшее или равное натуральное с остатком(делитель отличен от нул€)
	Z DIV_ZZ_N(Z);

	//ќстаток от делени€ большего целого числа на меньшее или равное целое с остатком(делитель отличен от нул€)
	Z MOD_ZZ_Z(Z);

	//ќстаток от делени€ большего целого числа на меньшее или равное натуральное с остатком(делитель отличен от нул€)
	Z MOD_ZZ_N(N);
};

#endif //Z_H#pragma once

